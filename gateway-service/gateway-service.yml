server:
  port: 9000
spring:
  application:
    name: gateway-service
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
  cloud:
    gateway:
      routes:
        - id: auth-service
          uri: ${AUTH_SERVICE_URL}
          predicates:
            - Path=/auths/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                key-resolver: "#{@smartKeyResolver}"
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/fallback/static
        - id: payment-service
          uri: http://localhost:9002
          predicates:
            - Path=/pay/**
          filters:
            - name: PreGatewayFilter
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                key-resolver: "#{@smartKeyResolver}"
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                fallbackUri: forward:/fallback/static
        - id: leture-service
          uri: http://localhost:9004
          predicates:
            - Path=/letures
          filters:
            - name: PreGatewayFilter
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                key-resolver: "#{@smartKeyResolver}"
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                fallbackUri: forward:/fallback/static
        - id: ai-curriculum-analysis-service
          uri: http://localhost:8000
          predicates:
            - Path=/ai/**
          filters:
            - name: PreGatewayFilter
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                key-resolver: "#{@smartKeyResolver}"
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                fallbackUri: forward:/fallback/static
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "http://localhost:8080"
              - "http://192.168.0.38:8080"
            allowedMethods:
              - "GET"
              - "POST"
              - "PUT"
              - "DELETE"
              - "OPTIONS"
            allowedHeaders:
              - "Authorization"
              - "Content-Type"
            allowCredentials: true
resilience4j:
  circuitbreaker:
    configs:
      default:
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 20s
team:
  auth-service-url: ${AUTH_SERVICE_URL}

jwt:
  issuer: ${JWT_ISSUER}
  secret_key: ${JWT_SECRET_KEY}

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive: DEBUG
    com.example.gatewayservice: DEBUG  # <- 네 패키지!
    reactor.netty: DEBUG
    org.springframework.http.server.reactive: DEBUG
